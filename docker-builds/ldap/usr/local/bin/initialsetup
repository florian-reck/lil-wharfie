#!/usr/bin/python3
import os
import ldap, ldap.sasl, ldap.modlist
import urllib.parse 
import crypt
import yaml
from time import time

## global defaults
configFile = '/storage/initialconfig.yaml'
nssConfigFile = '/storage/ldap/etc/libnss-ldap.conf'
nssConfigSecretFile = '/storage/ldap/etc/libnss-ldap.secret'
defaultHomeDir = '/home'


config = yaml.safe_load(open(configFile, 'r').read())
c = ldap.initialize('ldapi:///run/ldapi')
c.sasl_non_interactive_bind_s('EXTERNAL')


## setup initial domain and admin password
salt = crypt.mksalt()
fullDomainName = config['top']['domain'].strip().lower()
suffix = 'dc=' + fullDomainName.replace('.', ',dc=')
cryptPassword = crypt.crypt(config['top']['adminpassword'], salt)
noneValue = ['None'.encode('utf-8')]
adminDN = 'cn=admin,' + suffix
old = {
    'olcRootPw' : noneValue,
    'olcSuffix' : noneValue,
    'olcRootDN' : noneValue
}
new = {
    'olcRootPw' : [('{CRYPT}%s' % cryptPassword).encode('utf-8')],
    'olcSuffix' : [suffix.encode('utf-8')],
    'olcRootDN' : [adminDN.encode('utf-8')]
}
ldif = ldap.modlist.modifyModlist(old,new)
dn = 'olcDatabase={1}mdb,cn=config'
c.modify_s(dn,ldif)
c.unbind_s()


# we need to use the admin DN instead of SASL + root now
c = ldap.initialize('ldap://localhost')
c.simple_bind_s(adminDN, config['top']['adminpassword'])

## setup dcObjectf
domainControllerName = fullDomainName.split('.')[0]
add = {
    'dc'            :[domainControllerName.encode('utf-8')],
    'o'             : [config['top']['description'].encode('utf-8')],
    'objectClass'   : [b'organization', b'dcObject'],
}
ldif = ldap.modlist.addModlist(add)
c.add_s(suffix, ldif)

## setup OUs for people and groups
peopleOU = 'ou=people,' + suffix
add = {
        'ou'            : ['people'.encode('utf-8')],    
        'objectClass'   : [b'organizationalUnit'], 
}
ldif = ldap.modlist.addModlist(add)
c.add_s(peopleOU, ldif)

groupsOU = 'ou=groups,' + suffix
add = {
        'ou'            : ['groups'.encode('utf-8')],    
        'objectClass'   : [b'organizationalUnit'], 
}
ldif = ldap.modlist.addModlist(add)
c.add_s(groupsOU, ldif)


## setup users
userDNs = {}
for user in config['users']:

    # create POSIX user
    if user['enabled'] and 'password' in user:
        userDN = 'uid=%s,%s' % (user['uid'], peopleOU)
        userDNs[user['uid']] = userDN
        salt = crypt.mksalt()
        userPassword = crypt.crypt(user['password'], salt)
        displayName = '%s %s' % (user['givenName'], user['sirName'])
        add = {
            'uid'           : [user['uid'].encode('utf-8')],
            'cn'            : [displayName.encode('utf-8')],
            'sn'            : [user['sirName'].encode('utf-8')],
            'gecos'         : [('%s' % userDN).encode('utf-8')], 
            'givenName'     : [user['givenName'].encode('utf-8')],
            'displayName'   : [displayName.encode('utf-8')],
            'mail'          : [user['mail'].encode('utf-8')],
            'uidNumber'     : [str(user['uidNumber']).encode('utf-8')],
            'gidNumber'     : [str(user['gidNumber']).encode('utf-8')],
            'homeDirectory' : [(defaultHomeDir + os.sep + user['uid']).encode('utf-8')],
            'loginShell'    : [user['shell'].encode('utf-8')],
            'userPassword'  : [('{CRYPT}' + userPassword).encode('utf-8')],
            'objectClass'   : [b'inetOrgPerson', b'person', b'posixAccount', b'shadowAccount'],
            'shadowLastChange' : [str(int(time() / (60 * 60 * 24))).encode('utf-8')],
            'shadowMin'     : [b'0'],
            'shadowMax'     : [b'99999'],
            'shadowWarning' : [b'7'],
            'shadowInactive': [b'-1'],
            'shadowExpire'  : [b'-1'],
            'shadowFlag'    : [b'-1']
        }
        ldif = ldap.modlist.addModlist(add)
        print('User for "%s" (uid %i) has been created' % (displayName, user['uidNumber']))
        c.add_s(userDN, ldif)

    # create user group for POSIX user
        groupDN = 'cn=%s,%s' % (user['uid'], groupsOU)
        add = {
            'cn'            : [user['uid'].encode('utf-8')],
            'gidNumber'     : [str(user['gidNumber']).encode('utf-8')],
            'member'        : [('uid=%s,%s' % (user['uid'], suffix)).encode('utf-8')],
            'description'   : [('%s' % groupDN).encode('utf-8')],
            'objectClass'   : [b'groupOfNames', b'posixGroup']
        }
        ldif = ldap.modlist.addModlist(add)
        c.add_s(groupDN, ldif)
        print('User group for "%s" (gid %i) has been created' % (displayName, user['gidNumber']))


## setup groups
for group in config['groups']:
    groupDN = 'cn=%s,%s' % (group['name'], groupsOU)
    memberList = []
    for userUid in group['members']:
        if userUid in userDNs:
            userDN = (userDNs[userUid]).encode('utf-8')
            memberList.append(userDN)

    add = {
        'cn'            :  [group['name'].encode('utf-8')],
        'gidNumber'     :  [str(group['gidNumber']).encode('utf-8')],
        'member'        : [('uid=%s,%s' % (user['uid'], suffix)).encode('utf-8')],
        'objectClass'   :  [b'groupOfNames', b'posixGroup'],
        'member'        :  memberList
    }
    ldif = ldap.modlist.addModlist(add)
    c.add_s(groupDN, ldif)
    print('Group "%s" (gid %i) has been created' % (group['name'], group['gidNumber']))

c.unbind_s()

## create configuration file
configString = """
base {Base}
uri ldap://{FQDN}/
ldap_version 3
rootbinddn {AdminDN}
bind_policy soft
pam_filter objectclass=posixAccount
pam_password crypt
nss_base_passwd     {PeopleOU}?one
nss_base_shadow     {PeopleOU}?one
nss_base_group      {GroupsOU}?one
nss_map_attribute uniqueMember member
""".format(**{
    'Base'          :   suffix,
    'AdminDN'       :   adminDN,
    'PeopleOU'      :   peopleOU,
    'GroupsOU'      :   groupsOU,
    'FQDN'          :   fullDomainName
})


with open(nssConfigFile, 'w') as f:
    f.write(configString)

with open(nssConfigSecretFile, 'w') as f:
    f.write(config['top']['adminpassword'])
os.chmod(nssConfigFile, 0o644)
os.chmod(nssConfigSecretFile, 0o600)
print('Configuration files have been deployed')
